@page "/fetchdata"
@using BlazorQuickGridApp.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Runtime.InteropServices.JavaScript
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="forecasts.AsQueryable()" ResizableColumns>

        <PropertyColumn Property="f=>f.Date" Format="dddd, dd MMMM yyyy" Title="Date" Sortable="true"/>
        <PropertyColumn Property="f=>f.TemperatureC" Title="Temp. (C)" Sortable="true" />
        <PropertyColumn Property="f=>f.TemperatureF" Title="Temp. (F)" Sortable="true" />
        <PropertyColumn Property="f=>f.Summary" Title="Summary" >
            <ColumnOptions>
                <input/>
            </ColumnOptions>

        </PropertyColumn>

    </QuickGrid>


    <table class="table">
        <thead>
            <tr>
                <th>JSType.Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
}
